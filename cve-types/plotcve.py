import argparse
import re
import matplotlib.pyplot as plt
import numpy as np

regex = re.compile(r'data/nvdcve-2.0-(\d\d\d\d).xml.gz')

def readdata(filename):
    years = []
    v_app = []
    v_os = []
    v_hw = []
    with open(filename, 'rt') as f:
        for line in f:
            words = line.split()
            m = regex.match(words[0])
            year = int(m.group(1))
            app = int(words[1])
            os = int(words[2])
            hw = int(words[3])

            years.append(year)
            v_app.append(app)
            v_os.append(os)
            v_hw.append(hw)

            a = float(app)
            o = float(os)
            h = float(hw)
            t = a+o+h

            af = a/t*100
            of = o/t*100
            hf = h/t*100
            lf = (o+h)/t*100

            print '%4d %6d %6d %6d %6d' % (year, app, os, hw, os+hw)
            print '     %6.0f %6.0f %6.0f%% %6.0f%%' % (af, of, hf, lf)

    return np.array(years), np.array(v_app), np.array(v_os), np.array(v_hw)
    
def plot1(years, app, os, hw):
    fig = plt.figure(figsize=(24,18))
    ax = fig.add_subplot(111)

    data  = [(t[0], sum(t[1:]), t[1], t[2], t[3]) for t in zip(years, app, os, hw) if t[0] > 2002 and t[0] < 2019]
    years = np.array([t[0] for t in data])
    total = np.array([t[1] for t in data])
    app   = np.array([t[1] for t in data])
    os    = np.array([t[2] for t in data])
    hw    = np.array([t[3] for t in data])

    b0 = ax.bar(years+0.5, hw, color='red', width=0.6)
    b1 = ax.bar(years+0.5, os, color='blue', bottom=hw, width=0.6)
    b2 = ax.bar(years+0.5, app, color='black', bottom=hw+os, width=0.6)

    ax.set_xticks(years+0.5)
    ax.set_xticklabels([str(int(y)) for y in years], size=24)
    yticklabels = ax.get_yticklabels()
    ax.set_yticklabels(yticklabels, size=24)
    ax.set_xlim((min(years),max(years)))
    ax.set_xlabel('Year', size=24)
    ax.set_ylabel('# of vulnerabilities reported in the NVD', size=24)

    ax.legend((b0,b1,b2), ('HW Vulnerabilities', 'OS Vulnerabilities', 'App Vulnerabilities'), loc='best', ncol=3, fontsize=24)
    plt.savefig('images/breakdown-1.svg')
    plt.savefig('images/breakdown-1.png')
    plt.savefig('images/breakdown-1.pdf')

def plot2(years, app, os, hw):
    fig = plt.figure(figsize=(24,18))
    ax = fig.add_subplot(111)

    data  = [(t[0], sum(t[1:]), t[1], t[2], t[3]) for t in zip(years, app, os, hw) if t[0] > 2002 and t[0] < 2019]
    years = np.array([t[0] for t in data])
    total = np.array([t[1] for t in data])
    app   = np.array([t[1] for t in data])
    os    = np.array([t[2] for t in data])
    hw    = np.array([t[3] for t in data])

    b0 = ax.bar(years+0.5, total, color='blue', width=0.6)

    ax.set_xticks(years+0.5)
    ax.set_xticklabels([str(int(y)) for y in years], size=24)
    yticklabels = ax.get_yticklabels()
    ax.set_yticklabels(yticklabels, size=24)
    ax.set_xlim((min(years),max(years)))
    ax.set_xlabel('Year', size=24)
    ax.set_ylabel('# of vulnerabilities reported in the NVD', size=24)

    ax.legend((b0,), ('Total vulnerabilities',), loc='best', ncol=3, fontsize=24)
    plt.savefig('images/breakdown-2.svg')
    plt.savefig('images/breakdown-2.png')
    plt.savefig('images/breakdown-2.pdf')

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('datafile')
    args = parser.parse_args()
    years, app, os, hw = readdata(args.datafile)
    plot1(years, app, os, hw)
    plot2(years, app, os, hw)

if __name__ == '__main__':
    main()
